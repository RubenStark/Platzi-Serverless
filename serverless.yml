service: users-sls-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  apiGateway:
    apiKeys:
      - crud-serverless-users-apikey
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: arn:aws:dynamodb:us-east-1:619989790228:table/usersTable
        - Effect: Allow
          Action: 's3:*'
          Resource: arn:aws:s3:::sls-619989790228/*
  environment:
    BUCKET: sls-619989790228
    SECRET_EGG: ${ssm:/SECRET_EGG}

plugins:
  - serverless-plugin-typescript
  - serverless-apigateway-service-proxy
  - serverless-lift
  - serverless-domain-manager
  - serverless-offline
  - serverless-dynamodb-local


package:
    individually: true
    patterns:
      - "!*/**"

custom:
  customDomain:
    domainName: sls.daynet.link
    stage: dev
    basePath: api
    endpointType: 'regional'
    securityPolicy: tls_1_2
    apiType: rest
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

  apiGatewayServiceProxies:
    - sqs:
        path: /likeuser
        method: post
        queueName: likequeue
        cors: true
        response:
          template:
            # `success` is used when the integration response is 200
            success: |-
              { "message": "accepted" }
            # `clientError` is used when the integration response is 400
            clientError: |-
              { "message": "there is an error in your request" }
            # `serverError` is used when the integration response is 500
            serverError: |-
              { "message": "there was an error handling your request" }

constructs:
    sqs-queue:
        type: queue
        batchSize: 1
        worker:
            handler: likeuser/handler.likeuser
            reservedConcurrency: 1
            package:
              patterns:
                - "likeuser/handler.js"
        extensions:
          queue:
            Properties:
              QueueName: likequeue

      
functions:
  custom-authorizer:
    handler: authorizer/handler.authorize
    package:
      patterns:
        - "authorizer/handler.js"

  get-users:
    handler: getusers/handler.getby
    package:
      patterns:
        - "getusers/handler.js"
    events:
      - http:
          private: true
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
          
  create:
    handler: createUsers/handler.create
    package:
      patterns:
        - "createUsers/handler.js"
    events:
      - http:
          path: user
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 15
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/user-schema.json)}

  update-users:
    handler: updateUsers/handler.updateUsers
    package:
      patterns:
        - "updateUsers/handler.js"
    events:
      - http:
          path: user/{iduser}
          method: PATCH
          request:
            parameters:
              paths:
                iduser: true
            schemas:
              application/json: ${file(schemas/user-schema.json)}

  delete-users:
    handler: deleteUsers/handler.deleteUsers
    package:
      patterns:
        - "deleteUsers/handler.js"
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true

  signedURL:
    handler: signedurl/handler.signedS3URL
    package:
      patterns:
        - "signedurl/handler.js"
    events:
      - http:
          method: GET
          path: signedurl
          request:
            parameters:
              querystrings:
                filename: true
  
  thumbGenerator:
    handler: thumbnail/handler.thumbnailGenerator
    layers:
      - arn:aws:lambda:us-east-1:619989790228:layer:sls-crud-layer:3
    package:
      patterns:
        - "thumbnail/handler.js"
    events:
      - s3:
          bucket: sls-619989790228
          event: s3:ObjectCreated:*
          existing: true
          rules:
           - prefix: upload/

#layers:
  #base:
    #name: "prd-dependencies"
    #compatibleRuntimes:
      #- "nodejs18.x"
    #package:
      #artifact: nodejs.zip


resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: sls-619989790228
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
              Principal: '*'